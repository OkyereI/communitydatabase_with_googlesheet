"""Initial database schema

Revision ID: 64043d156bd8 # IMPORTANT: Replace with the actual new ID generated in step 4
Revises: None
Create Date: 2025-05-31 15:00:00.000000 # This date will be different in your file

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # IMPORTANT: Import postgresql for Enum

# revision identifiers, used by Alembic.
revision = '64043d156bd8' # IMPORTANT: Replace with the actual new ID generated in step 4
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # STEP 1: Explicitly create all ENUM types before they are used by any table
    # Using checkfirst=True to prevent errors if types somehow already exist (though they shouldn't after DB drop)
    sa.Enum('Male', 'Female', name='gender_types').create(op.get_bind(), checkfirst=True)
    sa.Enum('Employed', 'Unemployed', 'Student', 'Retired', name='employment_status_types').create(op.get_bind(), checkfirst=True)
    sa.Enum(
        'None', 'Primary School', 'Junior High School', 'Senior High School',
        'Vocational/Technical', 'Diploma', 'Bachelor\'s Degree',
        'Master\'s Degree', 'PhD', 'Other',
        name='educational_level_types'
    ).create(op.get_bind(), checkfirst=True)

    # STEP 2: Create the 'user' table
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=False), # Matches app.py's User model
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )

    # STEP 3: Create the 'community_member' table
    op.create_table('community_member',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False), # Matches app.py_updated
    sa.Column('last_name', sa.String(length=100), nullable=False), # Matches app.py_updated
    sa.Column('phone_number', sa.String(length=20), nullable=True), # Matches app.py_updated
    # IMPORTANT: Use postgresql.ENUM and create_type=False for all ENUM columns
    sa.Column('gender', postgresql.ENUM('Male', 'Female', name='gender_types', create_type=False), nullable=False), # Matches app.py_updated
    sa.Column('email', sa.String(length=120), nullable=True), # Matches app.py_updated
    # IMPORTANT: Use postgresql.ENUM and create_type=False for all ENUM columns
    sa.Column('employment_status', postgresql.ENUM('Employed', 'Unemployed', 'Student', 'Retired', name='employment_status_types', create_type=False), nullable=True), # Matches app.py_updated
    sa.Column('profession', sa.String(length=100), nullable=True), # Matches app.py_updated
    sa.Column('employer', sa.String(length=100), nullable=True), # Matches app.py_updated
    sa.Column('parent_guardian_name', sa.String(length=200), nullable=True), # Matches app.py_updated
    sa.Column('parent_guardian_contact', sa.String(length=20), nullable=True), # Matches app.py_updated
    sa.Column('parent_guardian_address', sa.Text(), nullable=True), # Matches app.py_updated
    sa.Column('date_of_birth', sa.Date(), nullable=False), # Matches app.py_updated
    sa.Column('residence', sa.Text(), nullable=True), # Matches app.py_updated
    sa.Column('area_code', sa.String(length=10), nullable=False), # Matches app.py_updated
    sa.Column('is_verified', sa.Boolean(), nullable=True), # Matches app.py_updated
    sa.Column('registration_date', sa.DateTime(), nullable=True), # Matches app.py_updated
    sa.Column('verification_code', sa.String(length=20), nullable=True), # Matches app.py_updated
    sa.Column('id_card_number', sa.String(length=50), nullable=False), # Matches app.py_updated
    # IMPORTANT: Use postgresql.ENUM and create_type=False for all ENUM columns
    sa.Column('educational_level', postgresql.ENUM('None', 'Primary School', 'Junior High School', 'Senior High School', 'Vocational/Technical', 'Diploma', "Bachelor's Degree", "Master's Degree", 'PhD', 'Other', name='educational_level_types', create_type=False), nullable=True), # Matches app.py_updated
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('id_card_number'),
    sa.UniqueConstraint('phone_number'),
    sa.UniqueConstraint('verification_code')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('community_member')
    op.drop_table('user') # Ensure user table is also dropped in downgrade

    # IMPORTANT: Explicitly drop all ENUM types after dropping the tables that use them
    # Using checkfirst=True to prevent errors if types don't exist (e.g., if downgrade partially failed)
    sa.Enum('Male', 'Female', name='gender_types').drop(op.get_bind(), checkfirst=True)
    sa.Enum('Employed', 'Unemployed', 'Student', 'Retired', name='employment_status_types').drop(op.get_bind(), checkfirst=True)
    sa.Enum(
        'None', 'Primary School', 'Junior High School', 'Senior High School',
        'Vocational/Technical', 'Diploma', 'Bachelor\'s Degree',
        'Master\'s Degree', 'PhD', 'Other',
        name='educational_level_types'
    ).drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
